https://leetcode-cn.com/problems/linked-list-cycle

环形链表：可类比成两名速度不同的运动员在环形赛道上跑步

创建两个指针p1(快)和p2(慢)，让它们同时指向这个链表的头节点。然后指针p1每次移动2步，指针p2每次移动1步。

如果列表不存在环的话，则指针p1将一定会先达到尾部，此时可以返回false；但列表中存在环的话，则指针p1一定会追上指针p2。

故可进一步理解题目可变成检查多次循环后，指针p1能否在达到尾部前，会跟指针p2指向同一个位置。是的话，则说明此列表是环形的，否则不是环形的。


链表是一种数据结构，由许多称为“节点”的迷你数据结构组成。节点链接在一起形成一个列表。
https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/05/screen-shot-2018-04-12-at-152754.png

单链表想访问下一个节点的值需使用XX.next的方式

每个节点包含2个属性：
1.它的价值。可以是任何东西：整数，字符，字符串，对象等
2.指向序列中下一个节点的指针

头节点：头节点是链表的第一个节点；尾节点：序列中最后一个节点，由于是最后一个节点，因此它指向null。

定义一个链表：
class Node:
    def __init__(self,cargo = None, next = None):
        self.cargo = cargo
        self.next = next
        
#定义每一个节点的值
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)

#定义节点的连接关系
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2

#则链表的结构如下：
![活动图](https://github.com/xiaopan868/python_algorithm/edit/master/企业微信截图_16158978208753.png)


# 判断链表是不是闭环
    def hasCycle(head):

        #检查单链表是否仅包含一个节点，是的话，直接返回false
        if(head == None or head.next == None): 
            return False

        slow = head           #将慢指针指向单链接的头节点
        fast = head.next      #将快指针指向单链接的第一个节点

        #快慢指针未相遇时，继续循环
        while(slow != fast):
            #快指针指向单链表的尾节点的时候，则说明此链表非环形
            if(fast == None or fast.next == None):
                return False
            #快指针走两格，慢指针走一格
            slow = slow.next
            fast = fast.next.next
        return True
        
print(hasCycle(node1))




