https://leetcode-cn.com/problems/longest-palindromic-substring/

拿到题目：
1.回文子串是指左右字符串相等的字符串，如abba
2.想到的解题思路是：
1）对于长度为偶数的字符串，以整个字符串长度的一半作为回文子字符串的起点len(s)//2
   count = len(s)//2 
   i = 0

   while i < count:
    if s[count-1-i] == s[count+i]:
       tmp += s[count+i]
       
   if(len(tmp)==0):
     sub = s[0]          //边界值，当整个偶数的字符串都没有相同的字符串的时候，输出第一个字符串即可，属于被忽略的地方，提醒自己写代码的时候要多想想边界值
   else:
     sub = tmp[::-1] + tmp[:]
2)对于长度为基数的字符串，以整个字符串长度的一半作为回文子字符串的起点len(s)//2
   count = len(s)//2
   i = 0

   while i <= count:
    if s[count-i] == s[count+i]:
        tmp += s[count+i]
    i = i+1
   if(len(tmp)==1):
      sub = s[count]
   else:
      sub = tmp[::-1] + tmp[1:]
3)整个字符串长度为1的时候，可直接输出字符串，属于边界值，易忽略
    if len(s) == 1:
       return s
       
从整体代码来看，本人觉得已经没有问题，但在实际运行过程中依旧存在不通过的场景，主要集中在选择回文起点的问题上，以上代码缺少了一些场景的考虑，会存在部分字符串不通过的场景，比如Adam/add等，
所以需要进一步考虑场景，需要将字符串的每一个字段当作回文中心的起点

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s or len(s) < 1:
            return ""
            
        def expandAroundCenter(left, right):
            L, R = left, right
            while L >= 0 and R <len(s) and s[L] == s[R]:
                L -= 1
                R += 1
            return R - L - 1

        left, right = 0, 0
        for i in range(len(s)):
            len1 = expandAroundCenter(i, i) # 奇数
            len2 = expandAroundCenter(i, i+1) # 偶数
            max_len = max(len1, len2)
            if max_len > right - left:
                left = i - (max_len - 1)//2
                right = i + max_len//2
        return s[left:right+1]

